{"name":"Machine Learning - Model For Predicting Exercise Quality","tagline":"Practical Machine Learning Project","body":"### Model For Predicting Exercise Quality\r\n####1.0 Summary:\r\nIn a study, 6 test subjects were asked to perform barbell lifts correctly and incorrectly in 5 different ways while wearing accelerometers on the belt, forearms, arms and the dumbells. The data from accelerometers was recorded. The goal of this project is to build a supervised machine learning model that uses the recorded data to predict the manner in which the exercise was performed on a test data set. \r\n\r\n####2.0 Exploratory Data Analysis\r\n#####2.1 Downloading The Data\r\n\r\n```\r\nif (!file.exists(\"./pml-training.csv\")) {\r\n    download.file(\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\", \r\n        destfile = \"./pml-training.csv\")\r\n}\r\nif (!file.exists(\"./pml-testing.csv\")) {\r\n    download.file(\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\", \r\n        destfile = \"./pml-testing.csv\")\r\n}\r\n```\r\nReading the data into a data frame. \r\n\r\n```\r\ninput_data <- read.csv(\"./pml-training.csv\")\r\ntest_data <- read.csv(\"./pml-testing.csv\")\r\nstr(input_data)\r\n```\r\n\r\n#####2.2 Working With Missing Values\r\nNow that we have the data in a data frame, it is time to explore the columns in the data set. We know that the data set has 19622 records with 160 columns each. \r\nWe first try to look at the missing values in the data set.\r\n```\r\ndf <- colSums(is.na(input_data))\r\nplot(df, xlab = \"Variable Index\", ylab=\"Number of NAs\", type='l')\r\n```\r\n![](https://raw.githubusercontent.com/ajammala/MachineLearning/master/untitled.png)\r\nThe plot shows us that a lot of fields contain a significant number of NAs (close to 19000 NAs out of 19622 observations). We can remove these values safely because they do not affect the outcome of the experiment.  \r\n\r\n```\r\ninput_data <- read.csv(\"./pml-training.csv\", na.strings=c(\"NA\",\"\"))\r\ninput_data <- input_data[, - which(as.numeric(colSums(is.na(input_data))) > 19000)]\r\n```\r\n\r\nThe first 7 columns in the data set are `X`, `user_name`, `raw_timestamp_part_1`, `raw_timestamp_part_2`, `cvtd_timestamp`, `new_window` and `num_window`. These are static values and do not directly impact the outcome of the experiment. They can be safely removed from the data set.\r\n\r\n```\r\ninput_data <- input_data[, -c(1:7)]\r\ndim(input_data)\r\nnames(input_data)\r\n```\r\n```\r\n##  [1] \"roll_belt\"            \"pitch_belt\"           \"yaw_belt\"            \r\n##  [4] \"total_accel_belt\"     \"gyros_belt_x\"         \"gyros_belt_y\"        \r\n##  [7] \"gyros_belt_z\"         \"accel_belt_x\"         \"accel_belt_y\"        \r\n## [10] \"accel_belt_z\"         \"magnet_belt_x\"        \"magnet_belt_y\"       \r\n## [13] \"magnet_belt_z\"        \"roll_arm\"             \"pitch_arm\"           \r\n## [16] \"yaw_arm\"              \"total_accel_arm\"      \"gyros_arm_x\"         \r\n## [19] \"gyros_arm_y\"          \"gyros_arm_z\"          \"accel_arm_x\"         \r\n## [22] \"accel_arm_y\"          \"accel_arm_z\"          \"magnet_arm_x\"        \r\n## [25] \"magnet_arm_y\"         \"magnet_arm_z\"         \"roll_dumbbell\"       \r\n## [28] \"pitch_dumbbell\"       \"yaw_dumbbell\"         \"total_accel_dumbbell\"\r\n## [31] \"gyros_dumbbell_x\"     \"gyros_dumbbell_y\"     \"gyros_dumbbell_z\"    \r\n## [34] \"accel_dumbbell_x\"     \"accel_dumbbell_y\"     \"accel_dumbbell_z\"    \r\n## [37] \"magnet_dumbbell_x\"    \"magnet_dumbbell_y\"    \"magnet_dumbbell_z\"   \r\n## [40] \"roll_forearm\"         \"pitch_forearm\"        \"yaw_forearm\"         \r\n## [43] \"total_accel_forearm\"  \"gyros_forearm_x\"      \"gyros_forearm_y\"     \r\n## [46] \"gyros_forearm_z\"      \"accel_forearm_x\"      \"accel_forearm_y\"     \r\n## [49] \"accel_forearm_z\"      \"magnet_forearm_x\"     \"magnet_forearm_y\"    \r\n## [52] \"magnet_forearm_z\"     \"classe\"\r\n```\r\n\r\n####3.0 Feature Selection\r\nThe next step is to select the predictor variables to be used in the model.\r\n\r\n#####3.1 Corelated Predictors\r\nWe now check for Corelated predictors in the data set. If two variables are highly correlated they will impart nearly exactly the same information to the regression model. Including both variables will result in a weak model by infusing the model with noise. \r\n\r\n```\r\nlibrary(caret)\r\nset.seed(1016)\r\nin_train <- createDataPartition(input_data$classe, p=0.70, list=FALSE)\r\ntraining <- input_data[in_train,]\r\nvalidation <- input_data[-in_train,]\r\n```\r\n\r\nThe following code examines the correlation coefficient. In this model, the Pearson correlation coefficient was chosen to be 0.99 (Indicating a very high level of correlation)\r\n```\r\nM <- abs(cor(training[,-53]))\r\ndiag(M) <- 0\r\nwhich(M > 0.99,arr.ind=T)\r\n```\r\n\r\n#####3.2 PCA\r\nThere are variables in the data set which have a high corelation coefficient. PCA can be used to reduce the number of variables. We can set the cutoff for the cumulative percent of variance to be retained by PCA to 0.99.\r\n```\r\npreProc=preProcess(training[,-53],method=\"pca\",thresh=.99)\r\npca_train=predict(preProc,training[,-53])\r\npca_validation <- predict(preProc, validation[-53])\r\n```\r\n\r\nThis reduces the number of predictors in the training set from 53 to 36.\r\n\r\n####4.0 Predictive Model\r\nFor building the predictive model, we use the Random Forest algorithm. \r\n```\r\nlibrary(randomForest)\r\nmodel_rf = randomForest(training$classe~., data=pca_train, ntree = 2048)\r\nmodel_rf\r\n```\r\n```\r\n## \r\n## Call:\r\n##  randomForest(formula = training$classe ~ ., data = pca_train,      ntree = 2048) \r\n##                Type of random forest: classification\r\n##                      Number of trees: 2048\r\n## No. of variables tried at each split: 6\r\n## \r\n##         OOB estimate of  error rate: 1.99%\r\n## Confusion matrix:\r\n##      A    B    C    D    E class.error\r\n## A 3898    4    1    2    1    0.002048\r\n## B   48 2580   23    2    5    0.029345\r\n## C    4   31 2342   17    2    0.022538\r\n## D    3    0   86 2155    8    0.043073\r\n## E    4   10   14    8 2489    0.014257\r\n```\r\n\r\nUsing cross validation, the accuracy of the model can be checked. \r\n```\r\nconfusionMatrix(validation$classe, predict(model_rf, pca_validation))\r\n```\r\n```\r\n## Confusion Matrix and Statistics\r\n## \r\n##           Reference\r\n## Prediction    A    B    C    D    E\r\n##          A 1667    5    0    0    2\r\n##          B   20 1104   13    1    1\r\n##          C    1   12 1006    7    0\r\n##          D    1    1   26  932    4\r\n##          E    0    1    8    2 1071\r\n## \r\n## Overall Statistics\r\n##                                         \r\n##                Accuracy : 0.982         \r\n##                  95% CI : (0.978, 0.985)\r\n##     No Information Rate : 0.287         \r\n##     P-Value [Acc > NIR] : < 2e-16       \r\n##                                         \r\n##                   Kappa : 0.977         \r\n##  Mcnemar's Test P-Value : 0.000312      \r\n## \r\n## Statistics by Class:\r\n## \r\n##                      Class: A Class: B Class: C Class: D Class: E\r\n## Sensitivity             0.987    0.983    0.955    0.989    0.994\r\n## Specificity             0.998    0.993    0.996    0.994    0.998\r\n## Pos Pred Value          0.996    0.969    0.981    0.967    0.990\r\n## Neg Pred Value          0.995    0.996    0.990    0.998    0.999\r\n## Prevalence              0.287    0.191    0.179    0.160    0.183\r\n## Detection Rate          0.283    0.188    0.171    0.158    0.182\r\n## Detection Prevalence    0.284    0.194    0.174    0.164    0.184\r\n## Balanced Accuracy       0.993    0.988    0.976    0.991    0.996\r\n```\r\n\r\nThe model has an accuracy of `0.982`. \r\n\r\n####5.0 Conclusion\r\nNow that we have a model, we can use it to predict the exercise quality over the test data set. We can do this with the following code.\r\n\r\n```\r\ntest_data <- test_data[, names(test_data) %in% names(input_data)]\r\npca_test <- predict(preProc, test_data)\r\npredicted_results <- predict(model_rf, pca_test)\r\n```\r\n\r\n####6.0 References\r\n1. Ugulino, W.; Cardador, D.; Vega, K.; Velloso, E.; Milidiu, R.; Fuks, H. Wearable Computing: Accelerometers' Data Classification of Body Postures and Movements. Proceedings of 21st Brazilian Symposium on Artificial Intelligence. Advances in Artificial Intelligence - SBIA 2012. In: Lecture Notes in Computer Science. , pp. 52-61. Curitiba, PR: Springer Berlin / Heidelberg, 2012. ISBN 978-3-642-34458-9. DOI: 10.1007/978-3-642-34459-6_6.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}